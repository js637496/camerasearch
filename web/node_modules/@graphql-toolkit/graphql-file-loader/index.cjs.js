'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const common = require('@graphql-toolkit/common');
const graphql = require('graphql');
const path = require('path');
const fs = require('fs');
const graphqlImport = require('graphql-import');

const GQL_EXTENSIONS = ['.gql', '.graphql', '.graphqls'];
class GraphQLFileLoader {
    loaderId() {
        return 'graphql-file';
    }
    async canLoad(pointer, options) {
        if (common.isValidPath(pointer)) {
            const extension = path.extname(pointer).toLowerCase();
            if (GQL_EXTENSIONS.includes(extension)) {
                const normalizedFilePath = path.isAbsolute(pointer) ? pointer : path.resolve(options.cwd || process.cwd(), pointer);
                if (fs.existsSync(normalizedFilePath)) {
                    return true;
                }
            }
        }
        return false;
    }
    async load(pointer, options) {
        const normalizedFilePath = path.isAbsolute(pointer) ? pointer : path.resolve(options.cwd || process.cwd(), pointer);
        const content = fs.readFileSync(normalizedFilePath, 'utf-8').trim();
        if (content && content !== '') {
            if (!options.skipGraphQLImport && /^\#.*import /i.test(content.trimLeft())) {
                const importedSchema = graphqlImport.importSchema(normalizedFilePath);
                return {
                    location: pointer,
                    document: graphql.parse(importedSchema),
                };
            }
            else {
                return {
                    location: pointer,
                    document: graphql.parse(new graphql.Source(content, pointer)),
                };
            }
        }
        return null;
    }
}

exports.GraphQLFileLoader = GraphQLFileLoader;
