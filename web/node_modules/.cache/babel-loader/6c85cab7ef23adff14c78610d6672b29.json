{"ast":null,"code":"var _jsxFileName = \"/home/t420/Desktop/camerasearch1/web/src/index.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { App } from \"./App\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(operation => {\n    const accessToken = getAccessToken();\n\n    if (accessToken) {\n      operation.setContext({\n        headers: {\n          authorization: `bearer ${accessToken}`\n        }\n      });\n    }\n  }).then(() => {\n    handle = forward(operation).subscribe({\n      next: observer.next.bind(observer),\n      error: observer.error.bind(observer),\n      complete: observer.complete.bind(observer)\n    });\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst client = new ApolloClient({\n  link: ApolloLink.from([new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const {\n          exp\n        } = jwtDecode(token);\n\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(\"http://localhost:4000/refresh_token\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  }), onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  }), requestLink, new HttpLink({\n    uri: \"http://localhost:4000/graphql\",\n    credentials: \"include\"\n  })]),\n  cache\n});\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["/home/t420/Desktop/camerasearch1/web/src/index.tsx"],"names":["React","ReactDOM","ApolloProvider","getAccessToken","setAccessToken","App","ApolloClient","InMemoryCache","HttpLink","onError","ApolloLink","Observable","TokenRefreshLink","jwtDecode","cache","requestLink","operation","forward","observer","handle","Promise","resolve","then","accessToken","setContext","headers","authorization","subscribe","next","bind","error","complete","catch","unsubscribe","client","link","from","accessTokenField","isTokenValidOrUndefined","token","exp","Date","now","fetchAccessToken","fetch","method","credentials","handleFetch","handleError","err","console","warn","graphQLErrors","networkError","log","uri","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { App } from \"./App\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\n\nconst cache = new InMemoryCache({});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable(observer => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then(operation => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `bearer ${accessToken}`\n              }\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n      accessTokenField: \"accessToken\",\n      isTokenValidOrUndefined: () => {\n        const token = getAccessToken();\n\n        if (!token) {\n          return true;\n        }\n\n        try {\n          const { exp } = jwtDecode(token);\n          if (Date.now() >= exp * 1000) {\n            return false;\n          } else {\n            return true;\n          }\n        } catch {\n          return false;\n        }\n      },\n      fetchAccessToken: () => {\n        return fetch(\"http://localhost:4000/refresh_token\", {\n          method: \"POST\",\n          credentials: \"include\"\n        });\n      },\n      handleFetch: accessToken => {\n        setAccessToken(accessToken);\n      },\n      handleError: err => {\n        console.warn(\"Your refresh token is invalid. Try to relogin\");\n        console.error(err);\n      }\n    }),\n    onError(({ graphQLErrors, networkError }) => {\n      console.log(graphQLErrors);\n      console.log(networkError);\n    }),\n    requestLink,\n    new HttpLink({\n      uri: \"http://localhost:4000/graphql\",\n      credentials: \"include\"\n    })\n  ]),\n  cache\n});\n\nReactDOM.render(\n  <ApolloProvider client={ client as any}>\n    <App />\n  </ApolloProvider>, \n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}