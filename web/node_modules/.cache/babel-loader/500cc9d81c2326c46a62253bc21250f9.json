{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ApolloLink } from 'apollo-link';\nimport { OperationQueuing } from './queuing';\nexport { OperationQueuing } from './queuing';\n\nvar throwServerError = function (response, result, message) {\n  var error = new Error(message);\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n\nvar parseAndCheckResponse = function (operation, accessTokenField) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      if (typeof bodyText !== 'string' || !bodyText.length) {\n        return bodyText || '';\n      }\n\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        return Promise.reject(parseError);\n      }\n    }).then(function (parsedBody) {\n      if (response.status >= 300) {\n        throwServerError(response, parsedBody, \"Response not successful: Received status code \" + response.status);\n      }\n\n      if (!parsedBody.hasOwnProperty(accessTokenField) && parsedBody.data && !parsedBody.data.hasOwnProperty(accessTokenField) && !parsedBody.hasOwnProperty('errors')) {\n        throwServerError(response, parsedBody, \"Server response was missing for query '\" + operation.operationName + \"'.\");\n      }\n\n      return parsedBody;\n    });\n  };\n};\n\nvar TokenRefreshLink = function (_super) {\n  __extends(TokenRefreshLink, _super);\n\n  function TokenRefreshLink(params) {\n    var _this = _super.call(this) || this;\n\n    _this.extractToken = function (body) {\n      if (body.data) {\n        return body.data[_this.accessTokenField];\n      }\n\n      return body[_this.accessTokenField];\n    };\n\n    _this.accessTokenField = params && params.accessTokenField || 'access_token';\n    _this.fetching = false;\n    _this.isTokenValidOrUndefined = params.isTokenValidOrUndefined;\n    _this.fetchAccessToken = params.fetchAccessToken;\n    _this.handleFetch = params.handleFetch;\n    _this.handleResponse = params.handleResponse || parseAndCheckResponse;\n    _this.handleError = typeof params.handleError === 'function' ? params.handleError : function (err) {\n      console.error(err);\n    };\n    _this.queue = new OperationQueuing();\n    return _this;\n  }\n\n  TokenRefreshLink.prototype.request = function (operation, forward) {\n    var _this = this;\n\n    if (typeof forward !== 'function') {\n      throw new Error('[Token Refresh Link]: Token Refresh Link is non-terminating link and should not be the last in the composed chain');\n    }\n\n    if (this.isTokenValidOrUndefined()) {\n      return forward(operation);\n    }\n\n    if (!this.fetching) {\n      this.fetching = true;\n      this.fetchAccessToken().then(this.handleResponse(operation, this.accessTokenField)).then(function (body) {\n        var token = _this.extractToken(body);\n\n        if (!token) {\n          throw new Error('[Token Refresh Link]: Unable to retrieve new access token');\n        }\n\n        return token;\n      }).then(this.handleFetch).catch(this.handleError).finally(function () {\n        _this.fetching = false;\n\n        _this.queue.consumeQueue();\n      });\n    }\n\n    return this.queue.enqueueRequest({\n      operation: operation,\n      forward: forward\n    });\n  };\n\n  return TokenRefreshLink;\n}(ApolloLink);\n\nexport { TokenRefreshLink };","map":null,"metadata":{},"sourceType":"module"}