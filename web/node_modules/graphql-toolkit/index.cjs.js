'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const common = require('@graphql-toolkit/common');
const core = require('@graphql-toolkit/core');
const fileLoading = require('@graphql-toolkit/file-loading');
const schemaMerging = require('@graphql-toolkit/schema-merging');
const jsonFileLoader = require('@graphql-toolkit/json-file-loader');
const urlLoader = require('@graphql-toolkit/url-loader');
const codeFileLoader = require('@graphql-toolkit/code-file-loader');
const graphqlFileLoader = require('@graphql-toolkit/graphql-file-loader');

const DEFAULT_SCHEMA_LOADERS = [new urlLoader.UrlLoader(), new jsonFileLoader.JsonFileLoader(), new graphqlFileLoader.GraphQLFileLoader(), new codeFileLoader.CodeFileLoader()];
const DEFAULT_DOCUMENTS_LOADERS = [new graphqlFileLoader.GraphQLFileLoader(), new codeFileLoader.CodeFileLoader()];
async function loadTypedefs(pointerOrPointers, options = {}, filterKinds = [], cwd = process.cwd(), loaders = DEFAULT_SCHEMA_LOADERS) {
    return core.loadTypedefsUsingLoaders(loaders, pointerOrPointers, options, filterKinds, cwd);
}
async function loadDocuments(pointerOrPointers, options = {}, cwd = process.cwd(), loaders = DEFAULT_DOCUMENTS_LOADERS) {
    return core.loadDocumentsUsingLoaders(loaders, pointerOrPointers, options, cwd);
}
async function loadSchema(pointerOrPointers, options = {}, cwd = process.cwd(), loaders = DEFAULT_SCHEMA_LOADERS) {
    return core.loadSchemaUsingLoaders(loaders, pointerOrPointers, options, cwd);
}

Object.keys(common).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return common[k];
    }
  });
});
Object.keys(core).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return core[k];
    }
  });
});
Object.keys(fileLoading).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return fileLoading[k];
    }
  });
});
Object.keys(schemaMerging).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return schemaMerging[k];
    }
  });
});
exports.loadDocuments = loadDocuments;
exports.loadSchema = loadSchema;
exports.loadTypedefs = loadTypedefs;
